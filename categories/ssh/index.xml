<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on RickyNews</title>
    <link>http://www.rickynews.com/categories/ssh/</link>
    <description>Recent content in Ssh on RickyNews</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Sep 2015 20:40:42 +0700</lastBuildDate>
    <atom:link href="http://www.rickynews.com/categories/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Easy &amp; Faster ssh management with peco</title>
      <link>http://www.rickynews.com/blog/2015/09/02/easy-and-faster-ssh-management-with-peco/</link>
      <pubDate>Wed, 02 Sep 2015 20:40:42 +0700</pubDate>
      
      <guid>http://www.rickynews.com/blog/2015/09/02/easy-and-faster-ssh-management-with-peco/</guid>
      <description>

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://www.rickynews.com/images/articles/20150903/peco.gif&#34; alt=&#34;peco&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/peco/peco&#34;&gt;Peco&lt;/a&gt; is a well-known interative filtering tool for all developers.
Once installed it on your system, you will definitely find its benefit and soon like it.
Today, I&amp;rsquo;m gonna give you some tips about peco for managing messy ssh connections.&lt;/p&gt;

&lt;h2 id=&#34;set-up-to-your-zshrc-bashrc&#34;&gt;Set up to your zshrc/bashrc&lt;/h2&gt;

&lt;p&gt;The initial setup is pretty easy. Just paste following code into your &lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function s () {
  peco_query=$@
  target=$(grep -iE &amp;quot;^host[[:space:]]+[^*]&amp;quot; ~/.ssh/config|grep -v &amp;quot;*&amp;quot;|awk &amp;quot;{print \$2}&amp;quot; | peco --query=&amp;quot;$peco_query&amp;quot;)
  if [ ! -z $target ]; then
    ssh $target
  fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you can type it on your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;s&lt;/code&gt; command is searching our &lt;code&gt;/.ssh/config&lt;/code&gt; and showing them up with an interative UI with peco.
We can choose and make a ssh connection to a server easily with typing just a few words.&lt;/p&gt;

&lt;p&gt;If you would like to add more ssh servers on the list, just putting it on your &lt;code&gt;~/.zshrc&lt;/code&gt; like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HOST rickynews-dev.com
  User         ricky
  IdentityFile ~/.ssh/credentials/rickynews.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tips-domain-management-with-route53&#34;&gt;TIPS: Domain management with Route53&lt;/h2&gt;

&lt;p&gt;If you have a bunch of private testing servers on AWS, it&amp;rsquo;s pretty hard to remember what services are working on on each IP addresses.
If so, use Amazon Route 53 and assign tentative A record for them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ubuntu01.rickydev.net 103.245.222.133
ubuntu02.rickydev.net 103.243.193.134
fedora01.rickydev.net 103.245.222.137
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also insert few lines to your &lt;code&gt;~/.ssh/config&lt;/code&gt; like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HOST *.rickydev.net
  IdentityFile ~/.ssh/credentials/rickynews.pem
HOST fedora*.rickydev.net
  User     fedora
HOST ubuntu*.rickydev.net
  User     ubuntu
HOST amazon*.rickydev.net
  User     ec2-user
HOST ubuntu01.rickydev.net
HOST ubuntu02.rickydev.net
HOST fedora01.rickydev.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t have your own DNS server, of course, setting them on your hosts files also fine.
After this configuration, your can choose your ssh servers faster and easiler and connect them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Sample ssh domain names were automatically generated by &lt;a href=&#34;https://www.mockaroo.com/&#34;&gt;mockaroo&lt;/a&gt;, no attacking intended.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use hostnames than ip addresses</title>
      <link>http://www.rickynews.com/blog/2015/04/19/use-hostnames-than-ip-addresses/</link>
      <pubDate>Sun, 19 Apr 2015 12:26:12 +0700</pubDate>
      
      <guid>http://www.rickynews.com/blog/2015/04/19/use-hostnames-than-ip-addresses/</guid>
      <description>

&lt;p&gt;元々私、オンプレの環境でエンジニアとして育ったこともあり、
IPアドレスに対して親近感がありました。悪く言えば、使うのが当たり前という先入観です。
ただ、最近気づいたことが、 「名前解決をもっと活用すると便利になる」という点です。&lt;/p&gt;

&lt;p&gt;IPアドレスの上に一枚Hostnameを入れることで、疎結合になります。
そして具象化することにより、意味を伝えることが出来るようになります。&lt;/p&gt;

&lt;p&gt;具体例をバンバン上げて解説していきたいと思います。&lt;/p&gt;

&lt;h3 id=&#34;開発サーバへ意味を含めたドメイン名を設定する&#34;&gt;開発サーバへ意味を含めたドメイン名を設定する&lt;/h3&gt;

&lt;p&gt;AWSを想定します。たとえば開発用に外部公開されているSTGがあったとします。まだ名称は決まっていません。 たいていElasticIPなどでIP固定にさせているかもしれまん。
Route53等のDNSサービスでPublic向けのAレコードを以下のように設定させておくと便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;//IPは適当です
54.178.158.136 centos01.rkszdev.net
54.178.158.136 centos02.rkszdev.net
54.178.158.137 centos03.rkszdev.net
54.178.158.138 ubuntu01.rkszdev.net
54.178.158.139 ubuntu02.rkszdev.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サブドメイン名の所で、centosなどインスタンス名の詳細を分かるようにします。
これによりただの数字の羅列から実体のサーバに変わります。&lt;/p&gt;

&lt;p&gt;「&lt;code&gt;centos01&lt;/code&gt;使いますね」のメッセージだけで、AWSのどのサーバを使うのかを
開発者同士で簡単に周知出来るようになります。&lt;/p&gt;

&lt;p&gt;応用編としては、&lt;code&gt;ubuntu01micro.rkszdev.net&lt;/code&gt;などもう少し情報を含めることも出来るかと思います。
ただ、あまりこれを増やしすぎてしまうと、逆にそれを推測できなくなってしまうため、
ある程度シンプルにして置くほうがベターです。&lt;/p&gt;

&lt;h3 id=&#34;社内ツールにドメインを設定する&#34;&gt;社内ツールにドメインを設定する&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;54.178.158.136 git.rkszdev.net
54.178.158.137 jenkins.rkszdev.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは定番かもしれませんが、Gitリポジトリなどあれば、それを設定していまいます。
メンバー間の説明が用意になります。
社内ツールの移行も、DNS側でIPアドレスを付け替えるだけでいいので、手間が少ないです。
Gitリポジトリサーバを移動しただけで、メンバーの全てのoriginを変えてもらうは
さすがに運用的にも非効率かと思います。&lt;/p&gt;

&lt;h3 id=&#34;chefノードに活用する&#34;&gt;Chefノードに活用する&lt;/h3&gt;

&lt;p&gt;基本的にSSH接続などと同じ原理ですが、Chefノードなどにもドメイン名を活用させます。
上記の原則を利用し、knife prepareの段階で、ドメイン名に対して実行すれば、下記のように準備されるはずです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{chef-root}/nodes/ubuntu01.rkszdev.net.json
{chef-root}/nodes/ubuntu02.rkszdev.net.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにすれば、「ubuntuサーバに実行するのか」などファイル名だけで情報を
送ることが出来ます。非常にメリットが大きいです。&lt;/p&gt;

&lt;h3 id=&#34;nginx-apacheのバックエンド記述に活用する&#34;&gt;Nginx/Apacheのバックエンド記述に活用する&lt;/h3&gt;

&lt;p&gt;名前の設定でドメイン名という概念を利用します。&lt;/p&gt;

&lt;p&gt;たとえば、rickynewsをNginxでL7ロードバランスするとします。
Upstream記述をしますが、そこでドメイン名も活用出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream www.rickynews.com {
  server 54.178.158.137;
  server 54.178.158.138;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにupstreamの所はGitのリポジトリ名にする戦略もあると思います。
以前は私は上記ポリシーを適応していました。
全体ポリシー統一が出来れば問題なさそうです。&lt;/p&gt;

&lt;h3 id=&#34;ローカルssh接続管理-ssh-config&#34;&gt;ローカルSSH接続管理 (~/ssh/config)&lt;/h3&gt;

&lt;p&gt;Mac等でSSH接続を管理する場合、&lt;code&gt;~/.ssh/config&lt;/code&gt;に更新していくのは定番だと思います。
ここでもHost名としてドメイン名の形式で記述をします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HOST bitbucket.com
  IdentityFile ~/.ssh/credentials/rksz-production-key.pem
HOST *.rksz-dev.net
  IdentityFile ~/.ssh/credentials/rksz-test-key.pem
HOST centos*.rksz-dev.net
  User centos
HOST ubuntu*.rksz-dev.net
  User ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ドメイン名ドリブンです。ssh configではワイルドカード記述も利用出来るため、
インスタンスごとのユーザ切り替えで積極的に活用します。&lt;/p&gt;

&lt;p&gt;上記のようにsshconfigを設定すれば、
下記でスムーズにインスタンスにアクセスすることが出来るようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ssh ubuntu01.rksz-dev.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントとしては、IPアドレスを書かなくてもいいところは書かないことです。
DNSの名前解決に委ねたほうが、比較的トラブルは起きにくいです。&lt;/p&gt;

&lt;h4 id=&#34;peco連携&#34;&gt;Peco連携&lt;/h4&gt;

&lt;p&gt;SSH接続をドメイン名ドリブンにすることでPecoと連携がスムーズになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sshpeco () {
    peco_query=$@
    target=$(grep -iE &amp;quot;^host[[:space:]]+[^*]&amp;quot; ~/.ssh/config|grep -v &amp;quot;*&amp;quot;|peco --query=&amp;quot;$peco_query&amp;quot;|awk &amp;quot;{print \$2}&amp;quot;)
    if [ ! -z $target ]
    then
        env TERM=xterm ssh $target
    fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bashrc等に上記を仕込んでおけば、かなりFuzzyにリモートサーバへアクセス可能になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sshpeco git rksz
// ssh git.rkzs-dev.net が発動し、アクセスが出来るようになります
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プライベートIPアドレスや、DNSに対するAdmin権限が無い方は、
手元のssh configさえ記載しておけばひとまず恩恵はさずかれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HOST ubuntu01.rksz-dev.local
  HostName 192.168.33.104 
  User     vagrant
  IdentityFile ~/.ssh/credentials/insecure_private_key
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
