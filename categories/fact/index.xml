<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fact on RickyNews</title>
    <link>http://www.rickynews.com/categories/fact/</link>
    <description>Recent content in Fact on RickyNews</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Aug 2015 12:30:17 +0900</lastBuildDate>
    <atom:link href="http://www.rickynews.com/categories/fact/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ファクト ―  情報は上から下ではない</title>
      <link>http://www.rickynews.com/blog/2015/08/13/the-fact-about-information/</link>
      <pubDate>Thu, 13 Aug 2015 12:30:17 +0900</pubDate>
      
      <guid>http://www.rickynews.com/blog/2015/08/13/the-fact-about-information/</guid>
      <description>

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://www.rickynews.com/images/articles/20150813/waterfall.jpg&#34; alt=&#34;waterfall&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;知っていると当たり前ですが、意外と気づいていない事実。それは&lt;strong&gt;情報は必ず上から下に流れるものではない&lt;/strong&gt;ということです。
これを意識することで物事の理解が捗るようになります。&lt;/p&gt;

&lt;h3 id=&#34;情報の流れ&#34;&gt;情報の流れ&lt;/h3&gt;

&lt;p&gt;書物やドキュメントを読んでいると、必ず上から下、もしくは右から左へ読むようになっているかと思います。なので、順番に読んでいけば全体像が理解できるようになるそのようなことを無意識で考えている人が多いはずです。&lt;/p&gt;

&lt;p&gt;しかしこれは大きな誤りで、実は文書を書いている書き手が技術を使い、順々に理解できるように文書を書いているからそのような構成になっているだけです。情報を無理やり文字というフォーマットに当てはめて伝達しようとしているため、このような形式をとってしまっていることになります。&lt;/p&gt;

&lt;p&gt;逆に絵画を見た時を想像してみるとわかりますが、絵画の情報を言葉で伝えることは非常に難しいです。流れるような文書を書き、絵画を見ていない人が同じ絵を想像してもらうことが容易ではないことは間違いなく理解できるかと思います。このように情報というものは我々が想像しているような順番に並んでいるものではないのです。&lt;/p&gt;

&lt;h3 id=&#34;プログラミングも同じ&#34;&gt;プログラミングも同じ&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;ソースコードは頭から読むようにできていないんです。頭から読むのは、学生の頃にやって失敗しまくった。要するに心が乱れるんですよ。本は前から読むように最適化されるんだけど、それは著者がそうなるように頑張ってるからなんです。生の情報は最適化されていないんです。だから、ソースコードを本のように読むのは、かなり非効率な読み方なんです。&lt;/p&gt;

&lt;p&gt;カーネルハッカー・小崎資広の「コードを読む技術」&lt;a href=&#34;http://cybozushiki.cybozu.co.jp/articles/m000316.html&#34;&gt;http://cybozushiki.cybozu.co.jp/articles/m000316.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;小崎氏が指摘している通り、ソースコードも一緒で上から下に読むものではないのです。細かい所は、処理の始まっている所をベースにして、タグのジャンプなどでどんどん移動して理解する必要があります。&lt;/p&gt;

&lt;h3 id=&#34;いかにして相手に情報を伝えるか&#34;&gt;いかにして相手に情報を伝えるか&lt;/h3&gt;

&lt;p&gt;ITのプロジェクトの現場では、仕様書を策定するなどして、共通の認識を持たせることは必須です。
ついプログラマーだと文書のみで頑張って伝えようとしてしまいがちですが、やはり絵も同時に用いて伝えるのがベストです。パワーポイントを使って、画像や図形、表のマトリックスなど２次元で表現できる方法はいくらでも使うべきと私は考えています。これを意識するようになってから、パワーポイントを使うことが好きになりました。&lt;/p&gt;

&lt;p&gt;ITのスタートアップなどの現場での仕様書で重要な点は、「&lt;strong&gt;相手に伝わって実際に参考にして実装が出来ること&lt;/strong&gt;」これだと思います。もちろん大きな会社や契約によっては文書を書くことによる納品や法的根拠などのために冗長な文書を作成する必要があるケースも多いかもしれません。しかし、スタートアップやチームで作る時にはこのようなSIerごっこは間違いなく本質ではありません。「共通認識を得られること」これが最も重要です。&lt;/p&gt;

&lt;p&gt;あと図形などを記載する以外に重要なことは、具体例です。「GithubのようなPull Requestの仕組み」「RedmineのカスタマイズページのようなDB設計」「Facadeパターン」たったこれだけの言葉で非常に多くの情報を伝えることが出来ます。しかも、認識のずれの可能性が限りなく低いです。もし言語がないと物事を伝えるのが難しいように、具体例があるだけでとてつもなく情報伝達がスムーズになります。頭にボンヤリしたアイディアがある場合、とにかく似たような例がないかを探すことがかなり重要であったりします。&lt;/p&gt;

&lt;h3 id=&#34;具体例-具体例-具体例&#34;&gt;具体例、具体例、具体例&lt;/h3&gt;

&lt;p&gt;「犬」という言葉より、「ダックスフンド」という言葉のほうが情報が詰まっています。
これはダックスフンドという言葉の抽象度が低い、すなわち具体的だからです。
我々はダックスフンドという言葉から犬という上位概念を瞬時に類推することが出来ます。&lt;/p&gt;

&lt;p&gt;ソフトウェアなどの開発現場において、この具体例は非常に重要です。
むしろソフトウェア開発というものは「具体化する作業」そのものです。
抽象的な言葉は色々な解釈ができるため、実際に作る場ではどんどん具体的な言葉に言い換えてあげる必要があります。具体的にすることで、相手も実際にイメージ出来き、はじめて物事が前に進みます。また、具体化とは決断することでもあるので、精神的にも非常に疲れます。ただこれを日頃から訓練することで大きく技術者としての腕も上がります。&lt;/p&gt;

&lt;p&gt;適度な抽象化能力を身につけたあとは、原点回帰して具体化によって自分の能力を高めるのはいかがでしょうか。情報というものは何かを考えるだけでも奥が深いです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
