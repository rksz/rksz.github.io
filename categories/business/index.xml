<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Business on RickyNews</title>
    <link>http://www.rickynews.com/categories/business/</link>
    <description>Recent content in Business on RickyNews</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Sep 2016 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://www.rickynews.com/categories/business/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ロジックを積み上げて高いビルを建設できるか</title>
      <link>http://www.rickynews.com/blog/2016/09/04/logic-building/</link>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0900</pubDate>
      
      <guid>http://www.rickynews.com/blog/2016/09/04/logic-building/</guid>
      <description>

&lt;p&gt;仕事とはいかに早く「ロジックのビルを建設できるか」が重要かと感じるこの頃です。&lt;/p&gt;

&lt;h2 id=&#34;とある社内の光景&#34;&gt;とある社内の光景&lt;/h2&gt;

&lt;p&gt;社内でMTGがあったとして、自分がファシリテータをやっているとします。
議論が始まると、参加者が一斉にパチパチ 手元のキーボードを叩いてメモでもしています。&lt;/p&gt;

&lt;p&gt;最後に「パソコンで今書いてたメモ、議事録にしたいからデータもらえる？」とランダムに聞いてみると、大抵の場合&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「自分用のメモなので多分役に立ちません」&lt;/li&gt;
&lt;li&gt;「そのまま使えないと思います」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんなケースが多い。もちろんパソコンのメモを通じて、自分で理解しようとはしているのだろうと推測しますが、
とりあえず聞こえた内容を写経しているだけでは、キーボードタイピングの訓練くらいにしかならなそうです。&lt;/p&gt;

&lt;h2 id=&#34;戦略立案や要件定義の難しさ&#34;&gt;戦略立案や要件定義の難しさ&lt;/h2&gt;

&lt;p&gt;企業の戦略立案やソフトウェアの上流工程など、問題自体を定義しながら解決しなければならない作業は割りと大変です。
唯一の答えはなく、誤った方向性の結論を出してしまうと、後工程の人が全員大変な目にあってしまいます。&lt;/p&gt;

&lt;p&gt;当事者としてそんな課題にでくわすと、頭も沢山使わないといけないので、ついついメールチェックのような簡単な業務に流されてしまいがちな人も多いと思います。
このように後回しにした結果、課題のデッドラインが近づき、最終的に「これでいいか」くらいのもので終わらせてしまう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;なぜダイバーシティーは必要か　人口減少時代に勝つ
日本マイクロソフト会長　樋口泰行氏（２）
&lt;a href=&#34;http://style.nikkei.com/article/DGXMZO05506030R00C16A8000000&#34;&gt;http://style.nikkei.com/article/DGXMZO05506030R00C16A8000000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また創薬のように直接材料費はきわめて少ないがＲ＆Ｄ（研究開発）に巨額の費用を要するビジネスでは、Ｒ＆Ｄの方向性や開発のプライオリティーを間違えると多額の損失につながる。それだけ戦略性が高い。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上記のようなR&amp;amp;Dの事例にかぎらず、どんな会社でも人員計画を間違えただけで、「アサインする仕事がない」or 「人員が足りない」となってしまいます。
とにかく方向性を決める最初の段階がとても重要です。ただ分かっているけど、難しさ故に、ついつい易きに流れてしまう。&lt;/p&gt;

&lt;p&gt;最近発見したTIPSは、これ自体を&lt;strong&gt;「ロジックでいかに早くビルを建設できるか」というゲームだと思うこと&lt;/strong&gt;です。
事実、自分が理解していないこと、スケジュール、担当者・・・沢山の要素を組み立てていかに早くビルを建設するか。
既にどこか事例があるなら、それを足場に、高速でビルを組み立てる。ソフトウェアであればRFCを見る、Apacheプロジェクト一覧見る、Github見る。&lt;/p&gt;

&lt;p&gt;ロジックのビルがある程度高くなったならば、今度は耐震性のあるビルを作るようにしていきます。
とにかくスタート地点から一歩でも前に進んだ状態に留まり切ることが重要です。スタート地点に留まってはダメです。&lt;/p&gt;

&lt;p&gt;このように「ビルの建設」というような具体的なイメージを想起させるメタファーを自分の中に持てると、どんどん作業が進みます。
具体的な進捗のイメージが自分の中に湧くからです。メタファーに関しては&lt;a href=&#34;http://amzn.to/2bM7RQC&#34;&gt;Code Complete&lt;/a&gt;でも指摘されています。&lt;/p&gt;

&lt;h2 id=&#34;最初の話&#34;&gt;最初の話&lt;/h2&gt;

&lt;p&gt;議事録を作るのしても、建設用の資材をただかき集めて散らかして終わりではなく、自分なりの小さなビルを組み立てることを意識することです。&lt;/p&gt;

&lt;p&gt;すなわち文書として具体的に完成させきるほうが重要だということです。
会議中に全部まとめきれないのであれば、メモを頼りに自分なりに補完して、あとで完成させることです。&lt;/p&gt;

&lt;p&gt;この日々のトレーニングを重ねることで、どんどん早く仕事のアウトプットが出せるようになるのではないかと感じます。
という訳で皆さん、是非ともよろしくお願いします！&lt;/p&gt;

&lt;h2 id=&#34;実践編&#34;&gt;実践編&lt;/h2&gt;

&lt;p&gt;「それではビルをどうやって建てればいいのか」という疑問も湧くかと思います。
今後執筆予定です。乞うご期待下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>自分の仕事に再現性があるか</title>
      <link>http://www.rickynews.com/blog/2015/08/26/repeat/</link>
      <pubDate>Wed, 26 Aug 2015 21:47:57 +0700</pubDate>
      
      <guid>http://www.rickynews.com/blog/2015/08/26/repeat/</guid>
      <description>

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://www.rickynews.com/images/articles/20150826/repeat.jpg&#34; alt=&#34;repeat&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;自分の仕事のクオリティの高さを左右する基本的な考えに「再現性」があります。
これを意識できるだけでぐっと仕事の納品物の質が高まります。&lt;/p&gt;

&lt;h2 id=&#34;再現性がないものはただの時間の消費&#34;&gt;再現性がないものはただの時間の消費&lt;/h2&gt;

&lt;p&gt;再現性のない仕事はただの自分の時間の切り売りといっても過言ではありません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自分にしかメンテナンス出来ない仕事&lt;/li&gt;
&lt;li&gt;再度構築できないインフラ手順&lt;/li&gt;
&lt;li&gt;自分にしか作れない仕様書&lt;/li&gt;
&lt;li&gt;自分しか知らないドキュメントの場所&lt;/li&gt;
&lt;li&gt;たまたまシステム障害が発生して直った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のような状態で仮に仕事が終わったとしても、また将来同じコストを書けて対応しなければならなくなります。「１年後の自分は他人」という格言があるように、とりあえず終わればいいや、の精神で作業をしていると、いつまでたっても組織がスケールしません。&lt;/p&gt;

&lt;h2 id=&#34;再現性とは何か&#34;&gt;再現性とは何か？&lt;/h2&gt;

&lt;p&gt;インフラ構築であれば、Ansible/Chefなどのツールを使ってコードとして管理できますし、社内のいわゆるナレッジであれば、Google Sitesなどを使って共有することが出来ます。共有フォルダにファイルを置くのでも良いですし、色々な手段はあります。&lt;/p&gt;

&lt;p&gt;勘違いしてはいけないのは、再現性というのは「Google Sitesでナレッジを書いた」「Ansibleでインフラ設定を作った」という所までではありません。&lt;strong&gt;全く赤の他人が頭を使わずゼロから同じことが出来るのか？&lt;/strong&gt;ここまで出来ることが再現性のある仕事か否かの判定ポイントとなります。&lt;/p&gt;

&lt;p&gt;手順書などをみて、すぐに全く同じことを再現できる仕事を作れれば、組織全体が強くなります。若手など経験が少ないメンバーでも同じものをトレースするだけで同じクオリティのものを出せるようになります。自分の経験にもなるので、横展開は容易です。この積み重ねが自立した組織を作り出す礎にもなります。&lt;/p&gt;

&lt;h2 id=&#34;ゼロから構築の大変さ&#34;&gt;ゼロから構築の大変さ&lt;/h2&gt;

&lt;p&gt;当然ですが、全くのゼロから何かを生み出すことは大変です。
なぜなら人間は想像出来ないことは生み出せないからです。&lt;/p&gt;

&lt;p&gt;システム開発も同じで、仕様が全くない状態から仕様を定義して実装していくのは難しいですが、いったん全部完成してしまえば、その改修作業はそこまで難しくありません。&lt;/p&gt;

&lt;p&gt;一度作ったことのあるシステムであれば、イメージが出来るので元々の仕様がなくても経験をベースとして、容易に実装することが出来ます。
仮に経験はなくても似たような手順書があれば、同じく容易に実装することが出来ます。&lt;/p&gt;

&lt;p&gt;組織で動く場合、上記のようなゼロイチの作業非効率が至る所で発生しています。これを「再現性のある仕事」で内部を徹底的に固め、過去にやったことは繰り返さず、どんどん新しい価値の創造に集中出来るようになるとすごい組織が出来ていきそうな気がしないでしょうか。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
