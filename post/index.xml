<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on RickyNews</title>
    <link>http://www.rickynews.com/post/</link>
    <description>Recent content in Posts on RickyNews</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Oct 2016 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://www.rickynews.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Armin van Buuren feat. Sarah Decourcy - Face Of Summer</title>
      <link>http://www.rickynews.com/blog/2016/10/24/armin-van-buuren-face-of-summer/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0900</pubDate>
      
      <guid>http://www.rickynews.com/blog/2016/10/24/armin-van-buuren-face-of-summer/</guid>
      <description>&lt;p&gt;&lt;center&gt;
&lt;div class=&#34;youtube&#34;&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QMKVlmmzvZI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;カッコイイです。Armin van Buurenのアルバム &lt;a href=&#34;https://open.spotify.com/album/0WbQxK1HJ9Y0HFNm2m8PUe&#34;&gt;Embrace (2015)&lt;/a&gt; の収録曲。Sarah deCourcy(&lt;a href=&#34;https://twitter.com/sarahdecourcydc&#34;&gt;@SarahdeCourcyDC&lt;/a&gt;)というロンドンのアーティストが歌っています。&lt;/p&gt;

&lt;p&gt;東京は既に2016年も10月末で、秋の様相を呈しておりますが、
この曲の内容は、夏の終盤にもう戻らないひと夏の思い出を回想している切ない曲です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lyrics - Armin Van Buuren Face of Summer
&lt;a href=&#34;http://www.azlyrics.com/lyrics/arminvanbuuren/faceofsummer.html&#34;&gt;http://www.azlyrics.com/lyrics/arminvanbuuren/faceofsummer.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;イントロからなんとも言えないギターソロから入り、シンセ〜ドラム〜歌と続きます。
サビのメロディーが昔ながらのトランスという感じで、
このFace of Summerという曲のテーマは、直近というよりは「過去の夏の切ない思い出」といった印象を受けます。&lt;/p&gt;

&lt;p&gt;Arminは何曲かに一個、こういうベーシックな90s Tranceみたいなのを混ぜてくるのですが、
個人的にもっと増やしてほしい所ですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「人工知能は人間を超えるか」を読んだ</title>
      <link>http://www.rickynews.com/blog/2016/10/04/matsuo-ai/</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0900</pubDate>
      
      <guid>http://www.rickynews.com/blog/2016/10/04/matsuo-ai/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://amzn.to/2daZWJ1&#34;&gt;人工知能は人間を超えるか&lt;/a&gt;を読んだ。
たまたまお仕事で、尾原和啓さんとのMTGに同席する機会があり、
最後にオススメの本とのことで、おすすめされた本は24時間以内に必ず購入して読んで読書感想文を投稿するポリシーの自分としては即購入。
読書感想文は盛りました。
東大の松尾研究室の松尾さんの書籍で、2015年に発行。よく見るとKindleで1位なんですね。休日にKindleランキングの上から順に本でも読んでみようかと思いました。&lt;/p&gt;

&lt;h2 id=&#34;身近だけど理解している人が少ないai&#34;&gt;身近だけど理解している人が少ないAI&lt;/h2&gt;

&lt;p&gt;飲み会の席でも、「将来的にどの職業がAIでなくなるのか論争」なども皆さんも1度は経験したことがあるかと存じます。
元上司も、「学習アルゴリズム売買の時代がすぐに来る。時期にメジャーなマーケットプレースもできる。」と再三言ってはいたものの、
まぁそうだろう、くらいしか自分の中でイメージ湧いていなかった。&lt;/p&gt;

&lt;p&gt;Tech系のブログでも定期的にディープラーニングで画像認識系のネタがあがったり、ニューラルネットワークや機械学習の個別の仕組みはぼんやり知ってはいるものの、
大局的な所をそもそも理解していない負い目もあった。という訳で早速読了。結論、読んでよかった。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;書物のポイントとしては下記の通り。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「特徴表現の学習」という問題が人工知能の本質だ。&lt;/li&gt;
&lt;li&gt;今までこの学習自体が結局人間が職人技でやっていた。&lt;/li&gt;
&lt;li&gt;ディープラーニングの登場で、特徴表現の学習自体をコンピュータができるようになりブレークスルーが一個起きた。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;年収を予想してみる&#34;&gt;年収を予想してみる&lt;/h2&gt;

&lt;p&gt;特徴量表現というのが重要。例として「属性情報からその人の年収の予想」という問題があったとする。
簡単にこれを表現するために、伝説の式を記載する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;y = f(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何かをInputすると、違うOutputが出てくるという、世の中だいたいなんでも当てはまるモデルだ。プログラミング言語でもFunctionというという名前で表現されている。これを今回の問題に当てはめると以下ということになる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;変数&lt;/th&gt;
&lt;th&gt;種類&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;年収&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;性別、誕生日、居住地域、職種、血液型・・・・・・などの属性項目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;年収のアウトプットへ変換するロジック&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;プログラミングでいうとこういうことである。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$income = incomePrediction($input, $input2, ...)

function incomePrediction() {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;すなわち年収yを出すためには、変数xと関数fをどうやって決定するかが重要ということである&lt;/strong&gt;。
例えば、血液型と身長から年収の算出ロジックを考えるより、職種や居住地域から年収算出ロジックを出したほうが遥かに精度も良さそうだ。&lt;/p&gt;

&lt;p&gt;ここの問題でややこしいのが以下の2点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;この変数xの値が何が良いか分からない&lt;/li&gt;
&lt;li&gt;変数xの値が決まらないと、f(変換ロジック)も決まってこない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;システム開発案件の初期フェーズの仕様決めのようで、大変な気持ちが分かります。
さて、&lt;strong&gt;今まではこのキーポイントである変数xを人間が設計していたということです&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;例えば変数xを、それっぽい「居住地域」「職種」などと決めてみて、実際の「年収」の答えから、関数fを導き出すロジックを考える・・・という訳である。ただし、ここの設計に結局人間が介在するので、本質的な課題だ・・・・というのがポイント。&lt;/p&gt;

&lt;p&gt;そんな中、この課題を別アプローチで解決できるであろう可能性を持ったテクニックが、ディープラーニングだということである。&lt;/p&gt;

&lt;h2 id=&#34;ディープラーニング&#34;&gt;ディープラーニング&lt;/h2&gt;

&lt;p&gt;アウトプットを出す方法として、人間の脳の回路を真似たニューラルネットワークという手法があるが、
これの応用編がディープラーニングである。ニューラルネットワークにおける隠れ層をどんどん深くしていく手法だが、
ここが面白い。インプットとアウトプットに同じデータを使って、正しいかどうかを学習させていく。&lt;/p&gt;

&lt;p&gt;画像認識で例えると、「手書きの3」のデータを入れて、最終的な答えのデータにも同じ「手書きの3」を入れる。
一度、情報をギュッと圧縮させて、それを同じように複合できないか・・・チャレンジさせる。
(高音質CDから、サイズの小さいmp3を作って、また高音質CDに戻す感じである）&lt;/p&gt;

&lt;p&gt;「一旦ギュッと情報を圧縮させても、また同じ情報を再現できる」ということはすなわち、その情報が本質的な特徴量だ！というロジックである。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「教師あり学習的な方法による教師なし学習」で特徴量を作り、最後に分類したいときは「教師あり学習」になる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ズバリ本でも上のように表現していてとても分かりやすい。概念の答えは自分自身なのである。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;元データから特徴データの抽出する。(1層目)&lt;/li&gt;
&lt;li&gt;1層目でできた特徴データ自体を1回目と同様に回答データとして、また特徴量を抽出する (2層目)&lt;/li&gt;
&lt;li&gt;繰り返し &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これを何度か繰り返すことで、最終的に出てくる「３」という概念までたどり着く。
層が厚くなればなるほど、抽象的な情報になっていくイメージである。
さらに繰り返していくと、「文字」だったりもっと抽象的になっていく。&lt;/p&gt;

&lt;h2 id=&#34;訓練させる&#34;&gt;訓練させる&lt;/h2&gt;

&lt;p&gt;実はこの「教師あり的学習で教師なし学習」アイディアは数十年前ら存在していたが、研究者が気づいていなかったポイントがあった。
それが、&lt;strong&gt;データには訓練を必要とするということだった。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例えば、天気予報でいえば、「たまたま元データの別々の県の天気が同じだったときに、それを相関と勘違いしてしまう」ということである。
サンプル数が少なければ少ないほど発生しそうだ。ただ、ここでこれを解決するために、さらに単純にリアルなサンプルを増やす訳ではなく、以下の方法を取るのが面白い。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;天気データに適当にノイズを加えてみて、人工的に適当なデータを作り、天気データを作ってみる。100件の元データから1万件作ってみる。&lt;/li&gt;
&lt;li&gt;ニューロンの隠れ層を50%くらい消してみて、それでも同じ答えが出るかどうか&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;人間ごときがデータに多少ノイズを加えても、すでに出した答えのやり方を使えなくしたとしても、正しそうな答えが出る特徴量を出すべし！ということだ。&lt;/strong&gt;
こうやって何事にも影響を受けないような特徴量を出す訳である。面白い。&lt;/p&gt;

&lt;p&gt;実際に、ノイズを入れて爆発的にデータを増やして学習させてみると、演算処理は大変になる。&lt;/p&gt;

&lt;p&gt;過去にグーグルではネコ画像識別のための特徴量抽出をやるために、1000台のサーバを利用して1億円ほどかけた。
（その後、GPUをうまく利用して、少ないマシンなどでもできるようになった)&lt;/p&gt;

&lt;p&gt;2016年では、クラウド技術も発達し、このデータ訓練のために気軽にコンピューティング能力を利用できるようになったというのがポイントです。&lt;/p&gt;

&lt;h2 id=&#34;人工知能が長年できなかった理由&#34;&gt;人工知能が長年できなかった理由&lt;/h2&gt;

&lt;p&gt;本の途中面白い一節があります。(意訳）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人工知能が長年できなかった理由は、コンピュータが概念を獲得しないまま、記号を単なる記号表現としてのみ扱ってなかった。
記号を「概念と記号表現がセットになったもの」として扱ってなかった。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ようするに、語学学習でいえば、日本語と英語の横への文字変換だけをして翻訳マシン作ろうとしていた、という感じでしょうか。
これでは、日本語と英語ができたとしても、じゃぁスペイン語にすぐ横展開できるのかいというと、また個別に作り直しですね。
そこに一つ概念が入れば、中国語だろうと、なんでも変換できそうです。&lt;/p&gt;

&lt;p&gt;とはいえ、コンピュータが概念を獲得できるというのは、結局特徴量というただのデータな訳ですが、ワクワクしてくるものがあります。&lt;/p&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;全部まとめると長くなりそうなのでこのあたりで一旦終了。
概念のみで、細かいロジックなどは個別に理解していくことは必要だなという印象。とはいえ、冒頭にも記載した通り、読んでよかった。
久しぶりに&lt;a href=&#34;http://amzn.to/2dpkaSv&#34;&gt;マッチ箱と脳&lt;/a&gt;でもまた読み返そうかなと思います。&lt;/p&gt;

&lt;p&gt;そういえば、学部生時代に山口高平先生の研究室を応募して、落ちたことを思い出した。定員8名、応募9人のうちの記念すべき1人だった記憶がある笑。
流石に当時はチャランポランすぎたと今さら反省。真面目に頑張ります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ロジックを積み上げて高いビルを建設できるか</title>
      <link>http://www.rickynews.com/blog/2016/09/04/logic-building/</link>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0900</pubDate>
      
      <guid>http://www.rickynews.com/blog/2016/09/04/logic-building/</guid>
      <description>

&lt;p&gt;仕事とはいかに早く「ロジックのビルを建設できるか」が重要かと感じるこの頃です。&lt;/p&gt;

&lt;h2 id=&#34;とある社内の光景&#34;&gt;とある社内の光景&lt;/h2&gt;

&lt;p&gt;社内でMTGがあったとして、自分がファシリテータをやっているとします。
議論が始まると、参加者が一斉にパチパチ 手元のキーボードを叩いてメモでもしています。&lt;/p&gt;

&lt;p&gt;最後に「パソコンで今書いてたメモ、議事録にしたいからデータもらえる？」とランダムに聞いてみると、大抵の場合&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「自分用のメモなので多分役に立ちません」&lt;/li&gt;
&lt;li&gt;「そのまま使えないと思います」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんなケースが多い。もちろんパソコンのメモを通じて、自分で理解しようとはしているのだろうと推測しますが、
とりあえず聞こえた内容を写経しているだけでは、キーボードタイピングの訓練くらいにしかならなそうです。&lt;/p&gt;

&lt;h2 id=&#34;戦略立案や要件定義の難しさ&#34;&gt;戦略立案や要件定義の難しさ&lt;/h2&gt;

&lt;p&gt;企業の戦略立案やソフトウェアの上流工程など、問題自体を定義しながら解決しなければならない作業は割りと大変です。
唯一の答えはなく、誤った方向性の結論を出してしまうと、後工程の人が全員大変な目にあってしまいます。&lt;/p&gt;

&lt;p&gt;当事者としてそんな課題にでくわすと、頭も沢山使わないといけないので、ついついメールチェックのような簡単な業務に流されてしまいがちな人も多いと思います。
このように後回しにした結果、課題のデッドラインが近づき、最終的に「これでいいか」くらいのもので終わらせてしまう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;なぜダイバーシティーは必要か　人口減少時代に勝つ
日本マイクロソフト会長　樋口泰行氏（２）
&lt;a href=&#34;http://style.nikkei.com/article/DGXMZO05506030R00C16A8000000&#34;&gt;http://style.nikkei.com/article/DGXMZO05506030R00C16A8000000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また創薬のように直接材料費はきわめて少ないがＲ＆Ｄ（研究開発）に巨額の費用を要するビジネスでは、Ｒ＆Ｄの方向性や開発のプライオリティーを間違えると多額の損失につながる。それだけ戦略性が高い。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上記のようなR&amp;amp;Dの事例にかぎらず、どんな会社でも人員計画を間違えただけで、「アサインする仕事がない」or 「人員が足りない」となってしまいます。
とにかく方向性を決める最初の段階がとても重要です。ただ分かっているけど、難しさ故に、ついつい易きに流れてしまう。&lt;/p&gt;

&lt;p&gt;最近発見したTIPSは、これ自体を&lt;strong&gt;「ロジックでいかに早くビルを建設できるか」というゲームだと思うこと&lt;/strong&gt;です。
事実、自分が理解していないこと、スケジュール、担当者・・・沢山の要素を組み立てていかに早くビルを建設するか。
既にどこか事例があるなら、それを足場に、高速でビルを組み立てる。ソフトウェアであればRFCを見る、Apacheプロジェクト一覧見る、Github見る。&lt;/p&gt;

&lt;p&gt;ロジックのビルがある程度高くなったならば、今度は耐震性のあるビルを作るようにしていきます。
とにかくスタート地点から一歩でも前に進んだ状態に留まり切ることが重要です。スタート地点に留まってはダメです。&lt;/p&gt;

&lt;p&gt;このように「ビルの建設」というような具体的なイメージを想起させるメタファーを自分の中に持てると、どんどん作業が進みます。
具体的な進捗のイメージが自分の中に湧くからです。メタファーに関しては&lt;a href=&#34;http://amzn.to/2bM7RQC&#34;&gt;Code Complete&lt;/a&gt;でも指摘されています。&lt;/p&gt;

&lt;h2 id=&#34;最初の話&#34;&gt;最初の話&lt;/h2&gt;

&lt;p&gt;議事録を作るのしても、建設用の資材をただかき集めて散らかして終わりではなく、自分なりの小さなビルを組み立てることを意識することです。&lt;/p&gt;

&lt;p&gt;すなわち文書として具体的に完成させきるほうが重要だということです。
会議中に全部まとめきれないのであれば、メモを頼りに自分なりに補完して、あとで完成させることです。&lt;/p&gt;

&lt;p&gt;この日々のトレーニングを重ねることで、どんどん早く仕事のアウトプットが出せるようになるのではないかと感じます。
という訳で皆さん、是非ともよろしくお願いします！&lt;/p&gt;

&lt;h2 id=&#34;実践編&#34;&gt;実践編&lt;/h2&gt;

&lt;p&gt;「それではビルをどうやって建てればいいのか」という疑問も湧くかと思います。
今後執筆予定です。乞うご期待下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>誤解していたポモドーロテクニックと本当の威力</title>
      <link>http://www.rickynews.com/blog/2016/06/30/pomodoro/</link>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0900</pubDate>
      
      <guid>http://www.rickynews.com/blog/2016/06/30/pomodoro/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://pomodorotechnique.com/&#34;&gt;ポモドーロ法&lt;/a&gt;は割と有名なテクニックかなと思います。
時間を作業25分 + 休憩5分＝1セットとして、繰り返していきます。
こうすることにより「時間を分割して、集中力を上がる」という訳です。&lt;/p&gt;

&lt;p&gt;昔に実際に使ってみて、「まぁ・・・無いよりはあったらいいのかな」くらいの感覚ではあった。
Macにはポモドーロタイマーは入っているものの、気休め程度に入っている程度だった。&lt;/p&gt;

&lt;p&gt;実践者の日本語のブログの記事をみても&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ポモドーロがあると集中出来る&lt;/li&gt;
&lt;li&gt;勉強がたくさん出来るようになった&lt;/li&gt;
&lt;li&gt;必ず休憩が入るので、集中が長続きする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;くらいの浅い記述しかない。実際に自分もこのテクニックについて深く掘り下げようと思ってもいなかった。
実際の活用方法は全然違った。&lt;/p&gt;

&lt;h2 id=&#34;きっかけはsoft-skills&#34;&gt;きっかけはSoft Skills&lt;/h2&gt;

&lt;p&gt;きっかけは最近、日本語翻訳が出た「&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4822251551/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4822251551&amp;linkCode=as2&amp;tag=recommend7150-22&#34;&gt;SOFT SKILLS ソフトウェア開発者の人生マニュアル&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=recommend7150-22&amp;l=as2&amp;o=9&amp;a=4822251551&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;」という本での記述。ここの記載で考え方がガラっと変わった。すっ飛ばして理解したい人のために、自分なりの解釈もいれたまとめは以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ポモドーロの達成回数で一日の業務の終わりを定義する&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;途中でインタラプトが入った場合は、ポモドーロを失敗とする&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ポモドーロ数で1日の業務量を見積もる&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私はソフトウェアエンジニアですが、業務の性質上どうしても気が散りやすい。
時間が自由だったり、インターネットに常に接続もされているので、かなり個人管理能力が問われる。&lt;/p&gt;

&lt;p&gt;1日の作業の終了定義も難しく、長く働いたり早く帰ったりまちまちにもなりがち。
毎回同じ作業の反復であればある程度推測が出来るが、毎回新プロジェクト＆新技術の多い現場だとそれも難しい。
勉強もいくらでも出来るので、ようするに自分なりの作業スコープ範囲を決めないと時間が無限に膨れ上がってしまう。&lt;/p&gt;

&lt;h2 id=&#34;ポモドーロ-テクニックの効果&#34;&gt;ポモドーロ・テクニックの効果&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;終了目標＝ポモドーロ数とすると、必ず集中した生産的な状態を迎えて1日を終えられる&lt;/li&gt;
&lt;li&gt;1ポモドーロという単位で見積もりに対して、実績の差分が&lt;strong&gt;正確に&lt;/strong&gt;分かる&lt;/li&gt;
&lt;li&gt;「ポモドーロを終わらせきる」という目標のために、必然的に集中せざるをえない。

&lt;ul&gt;
&lt;li&gt;途中で違う作業開始したら、ポモドーロ失敗。最初からやり直し。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やってみると本当にしんどい。1日8時間労働でも理論上16ポモドーロは出来るはずだが、
実際は8個くらいできたら相当凄い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1日8ポモドーロを持っていると仮定。この8個をどのタスクに分解しようか、などを朝に考える。&lt;/li&gt;
&lt;li&gt;8ポモドーロが達成出来たら即帰る。&lt;/li&gt;
&lt;li&gt;これを達成してもプロジェクトが終わらない場合は、そもそもタスク優先順位が間違ってるか、期日設定が間違っているので考えなおす。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相当な作業のストレスがなくなり、バンバン仕事も進みそうな感じがしませんか？&lt;/p&gt;

&lt;h2 id=&#34;併用ツール&#34;&gt;併用ツール&lt;/h2&gt;

&lt;p&gt;Soft Skillsの中では Kanbanflowというツールをおすすめしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kanbanflow.com&#34;&gt;https://kanbanflow.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際に使ってみた所、たしかに素晴らしい。Trello + ポモドーロタイマーという感じで、
UIは多少雑なものの、集中力を強制的に出させる仕組みがすごい。
タスクを選んで、ポモドーロを開始でき、その作業実績も自動的に計算されるため、本質的に何時間使っているかも正確に分かる。少しでもこの記事で興味がわけば、確実におすすめ。&lt;/p&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;なお、この記事は私の貴重な1ポモドーロを使って書かれた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>資料整理としての One fact in one place</title>
      <link>http://www.rickynews.com/blog/2016/04/20/one-fact-in-one-place/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0900</pubDate>
      
      <guid>http://www.rickynews.com/blog/2016/04/20/one-fact-in-one-place/</guid>
      <description>&lt;p&gt;One fact in one placeとはDBのテーブル設計の時によく出てくる言葉で、「一つのデータは一箇所にあるべき」という意味です。例えばTwitterのユーザID(@rksz)がテーブル内のいろいろな所でそのままコピーされてたら恐ろしいですよね。変更したい時に全部探して、整合性をとるために全部アップデートが必要です。&lt;/p&gt;

&lt;p&gt;でもこれは・・・日頃の生活に関しても何でも同じことが言えます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スケジュールは社内全員Google Calendarで管理するべきだ&lt;/li&gt;
&lt;li&gt;Excelファイルではなく、1箇所のGoogle Spreadsheetを使ってみんなで編集する&lt;/li&gt;
&lt;li&gt;作業ファイルは全てEvernoteに集約してある&lt;/li&gt;
&lt;li&gt;TODO管理ツールは一箇所だけに集約する&lt;/li&gt;
&lt;li&gt;Redmineの個別チケットへの直接ファイルをアップするのではなく、ファイルのリンク先を添付するべきだ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これだけを頭にいれるだけで、ぐっと情報が整理出来るようになります。RDBはまさに情報整理の本質部分を教えてくれます。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
